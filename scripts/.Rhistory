cat("Hello world")
cat("Hello world")
1 + 2
getwd
getwd()
setwd("\Documents")
setwd("Documents")
getwd()
b <- c(0, 1, 2)
b
print(b)
paste(b, 9)
b <- paste(b, 9)
b
print(b)
b_length <- b.length()
b_length <- length(b)
b_length
b[1]
print(b[1])
b + 1
typeof(b)
exit
vec <- c(-5:5)
vec <- c(-5:5)
fnc <- function(v) {
v[v < 0] <- 0
return(v)
}
fnc(vec)
library(styler)
# Install and load the styler library
install.packages("styler")
library(styler)
# style_text example:
# string representation of R code
ugly_code <- "a<-function( x){1+1}   "
ugly_code
# Print and view poorly formated code
print(ugly_code)
# Use style_text to format code
style_text(ugly_code)
# Use style_text to format code
style_text(ugly_code)
# Install and load the lintr library
install.packages("lintr")
library(lintr)
bf <- c("rice", "pork")
l <- c("mushrooms, steak")
meals <- list(breakfast = bf, lunch = l)
meals
meals[1]
meals[[1]]
meals[2]
meals[[2]]
bf <- c("rice", "pork")
l <- c("mushrooms, steak")
meals <- list(bf, l)
meals
View(meals)
meals[1]
meals[2 , 1]
dim(meal)
dim(meals)
meals
meals
meals[3]
meals[1]
meals[2]
meals[[1]]
meals[[2]]
meals
meals[1]
meals[[1]]
meals[2]
meals[[2]]
typeof(meals[[2]])
typeof(meals[2])
third_power <- function(val) {
cubed <- val^(3)
return(cubed)
}
twenty_seven <- third_power(3)
movies <- c('The Great Gatsby', 'The Hangover', 'The Dark Knight', 'Mad Max:Fury Road', 'Finding Nemo', 'Get Out')
top_three <- c(movies[2:5])
top_three
excited <- c(paste0(movies, " is a great movie!"))
excited
excited <- paste(movies, 'is a great movie!')
excited
without_four <- c(movies[-4])
without_four
winter_break <- as.Date('12/15/18', '%m/%d/%y')
winter_break
RemoveDigits <- function(a="INFO 201", b="CSE 142", c="mps-803c") {
no_digits <- c(a, b, c)
str_replace_all(no_digits, "1:9", "")
return(no_digits)
}
courses <- RemoveDigits("INFO 201", "CSE 142", "mps-803c")
library(stringr)
courses <- RemoveDigits("INFO 201", "CSE 142", "mps-803c")
courses
RemoveDigits <- function(a="INFO 201", b="CSE 142", c="mps-803c") {
no_digits <- c(a, b, c)
str_replace_all(no_digits, "1:9", "")
return(no_digits)
}
courses <- RemoveDigits("INFO 201", "CSE 142", "mps-803c")
courses
RemoveDigits <- function(a="INFO 201", b="CSE 142", c="mps-803c") {
no_digits <- c(a, b, c)
str_replace_all(no_digits, "1:9", "")
return(no_digits)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
courses <- RemoveDigits("INFO 201", "CSE 142", "mps-803c")
courses
13.8 * '^'(10, 9)
make_introduction <- function(name, age) {
intro_line <- paste0("Hello, my name is ", name, " and I'm ", age, " years old")
return(intro_line)
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `make_introduction`
## function
my_intro <- make_introduction(my_name, my_age)
## Create a variable `casual_intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my_intro`
## variable
casual_intro <- paste("Hey, I'm", str_sub(my_intro, 17))
my_name <- "test"
my_age <- 99
make_introduction <- function(name, age) {
intro_line <- paste0("Hello, my name is ", name, " and I'm ", age, " years old")
return(intro_line)
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `make_introduction`
## function
my_intro <- make_introduction(my_name, my_age)
## Create a variable `casual_intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my_intro`
## variable
casual_intro <- paste("Hey, I'm", str_sub(my_intro, 17))
casual_intro
my_intro
my_name <- "xi"
my_age <- 19
make_introduction <- function(name, age) {
intro_line <- paste0("Hello, my name is ", name, " and I'm ", age, " years old")
return(intro_line)
}
## Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `make_introduction`
## function
my_intro <- make_introduction(my_name, my_age)
## Create a variable `casual_intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my_intro`
## variable
casual_intro <- paste("Hey, I'm", str_sub(my_intro, 17))
casual_intro
movies <- c("incredibles", "finding nemo", "monsters", "toy story", "cars", "luxo jr")
## Create a vector `top_three` that only contains the first three movies in the vector.
## Use indexing.
top_three <- c(movies[1:3])
## Using your vector and the paste method, create a vector `excited` that adds the phrase -
## " is a great movie!" to the end of each element in your movies vector
excited <- c(paste(movies[1:6], " is a great movie!"))
## Create a vector `without_four` that has your first three movies, and your 5th and 6th movies.
without_four <- c(movies(-4))
numbers <- seq(700, 999)
RemoveDigits <- function(string_vector) {
gsub('\\d', "", string_vector)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
test <- c("INFO 201", "CSE 142")
RemoveDigits(test)
RemoveDigits <- function(string_vector) {
gsub('\\d*', "", string_vector)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
test <- c("INFO 201", "CSE 142")
RemoveDigits(test)
RemoveDigits <- function(string_vector) {
gsub('\\d', "", string_vector)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
test <- c("INFO 201", "CSE 142, "mps-803c"))
RemoveDigits(test)
RemoveDigits <- function(string_vector) {
gsub('\\d', "", string_vector)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
test <- c("INFO 201", "CSE 142", "mps-803c"))
RemoveDigits(test)
RemoveDigits <- function(string_vector) {
gsub('\\d', "", string_vector)
}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
test <- c("INFO 201", "CSE 142", "mps-803c")
RemoveDigits(test)
RemoveDigits <- function(vector) {gsub("[0-9]", "", vector)}
## Demonstrate that your approach is successful by passing a vector of courses to your function
## For example, RemoveDigits(c("INFO 201", "CSE 142", "mps-803c"))
RemoveDigits(c('Info309', 'math126', 'freex56', 'sdgefg553vdbt5db53rvdv'))
are_digits_in_vector <- function(vector) {
if (any(stringr::str_detect(vector, "[0-9]+"))) {
print("Oh no!")
}
else {
print("Yay!")
}
}
are_digits_in_vector(c("1232o", "fjdkajfd"))
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my_intro`
# variable
library(stringr)
casual_intro <- str_replace_all(my_intro, "Hello my name is", "Hey, I'm")
casual_intro
make_introduction <- function (name, age) {
introduction <-  paste("Hello my name is", name, "and I'm", age, "years old")
return(introduction)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age` into your `makeIntroduction`
# function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my_intro`
# variable
library(stringr)
casual_intro <- str_replace_all(my_intro, "Hello my name is", "Hey, I'm")
casual_intro
movies <- c("x-men", "first men", "venom", "incredibles2", "crazt rich asians", "a star is born")
# Create a vector `top_three` that only contains the first three movies in the vector
top_three <- movies[c(1, 2, 3)]
top_three
findFunction("split")
---
title: "Table options"
output: html_document
---
Several packages support making beautiful tables with R, such as
* [xtable](https://cran.r-project.org/web/packages/xtable/)
* [stargazer](https://cran.r-project.org/web/packages/stargazer/)
* [pander](http://rapporter.github.io/pander/)
* [tables](https://cran.r-project.org/web/packages/tables/)
* [ascii](http://eusebe.github.io/ascii/)
* etc.
It is also very easy to make tables with knitr's `kable` function:
```{r echo = FALSE, results = 'asis'}
library(knitr)
kable(mtcars[1:5, ], caption = "A knitr kable.")
```
library("dplyr")
library(dplyr)
knit_with_parameters('C:/Users/Wendy/Desktop/test/indexgrader.rmd')
library(tidyverse)
library(dplyr)
library(tibble)
knitr::opts_chunk$set(echo = TRUE)
# Read in the dataset
obj1 <- read.csv("China_EO_49to17.csv")
data <- as_tibble(obj1)
provinces_ratio <- function(p1, p2) {
df <- data %>% filter(Year >= 2000) %>% select("Year", contains(p1), contains(p2)) %>% arrange(desc(Year))
new_col <- if(ncol(df) > 3) {
df[[3]]/df[[5]]
} else {
df[[2]]/df[[3]]
}
df <- df %>% mutate(Output_Ratio = new_col)
}
test <- provinces_ratio("Shanghai", "Beijing")
test2 <- provinces_ratio("Shanghai_Output", "Beijing_Output")
test
? toString
library("abind", lib.loc="~/R/win-library/3.5")
detach("package:abind", unload=TRUE)
library("abind", lib.loc="~/R/win-library/3.5")
setwd("D:/Wendy/Google Drive/UW/2018-19/GEOG458/final-project/final-project")
shiny::runApp()
runApp()
shiny::runApp()
install.packages(shiny)
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
